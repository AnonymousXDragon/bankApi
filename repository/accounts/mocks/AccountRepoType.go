// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	db "bank/db/sqlc"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepoType is an autogenerated mock type for the AccountRepoType type
type AccountRepoType struct {
	mock.Mock
}

// AccountExecTx provides a mock function with given fields: args, fn
func (_m *AccountRepoType) AccountExecTx(args interface{}, fn func() error) error {
	ret := _m.Called(args, fn)

	if len(ret) == 0 {
		panic("no return value specified for AccountExecTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, func() error) error); ok {
		r0 = rf(args, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRetrieveTx provides a mock function with given fields: args, fn
func (_m *AccountRepoType) AccountRetrieveTx(args interface{}, fn func() ([]db.Account, error)) (*[]db.Account, error) {
	ret := _m.Called(args, fn)

	if len(ret) == 0 {
		panic("no return value specified for AccountRetrieveTx")
	}

	var r0 *[]db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, func() ([]db.Account, error)) (*[]db.Account, error)); ok {
		return rf(args, fn)
	}
	if rf, ok := ret.Get(0).(func(interface{}, func() ([]db.Account, error)) *[]db.Account); ok {
		r0 = rf(args, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, func() ([]db.Account, error)) error); ok {
		r1 = rf(args, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountSideEffectsTx provides a mock function with given fields: args, fn
func (_m *AccountRepoType) AccountSideEffectsTx(args interface{}, fn func() (db.Account, error)) (*db.Account, error) {
	ret := _m.Called(args, fn)

	if len(ret) == 0 {
		panic("no return value specified for AccountSideEffectsTx")
	}

	var r0 *db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, func() (db.Account, error)) (*db.Account, error)); ok {
		return rf(args, fn)
	}
	if rf, ok := ret.Get(0).(func(interface{}, func() (db.Account, error)) *db.Account); ok {
		r0 = rf(args, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, func() (db.Account, error)) error); ok {
		r1 = rf(args, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountTx provides a mock function with given fields: args
func (_m *AccountRepoType) CreateAccountTx(args db.CreateAccountParams) (db.Account, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountTx")
	}

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(db.CreateAccountParams) (db.Account, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(db.CreateAccountParams) db.Account); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(db.CreateAccountParams) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: id
func (_m *AccountRepoType) DeleteAccount(id int32) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAccounts provides a mock function with given fields:
func (_m *AccountRepoType) ListAccounts() ([]db.Account, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 []db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]db.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []db.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: params
func (_m *AccountRepoType) UpdateAccount(params db.UpdateAccountParams) (db.Account, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(db.UpdateAccountParams) (db.Account, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(db.UpdateAccountParams) db.Account); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(db.UpdateAccountParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountRepoType creates a new instance of AccountRepoType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepoType(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepoType {
	mock := &AccountRepoType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
